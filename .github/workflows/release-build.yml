name: Release-Build
defaults:
    run:
        shell: pwsh

# only comes into play on a PUSH of a tag to the repository
on:
  push:
    tags:
        - 'v*'

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_NOLOGO: true

jobs:
  build_target:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Build Source
        run: .\Build-LibLLVMAndPackage.ps1 -FullInit

      - name: Upload NuGet Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win-x64-nuget
          path: .\BuildOutput\Nuget

  build_independent_packages:
    runs-on: windows-latest
    steps:
      # repo check out needed to support build scripts
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      # This needs to download the LLVM sources for the supported release
      - name: Build Handle Source package
        run: .\Build-HandlesPackage.ps1 -FullInit

      - name: Build Meta Package
        run: .\Build-MetaPackage.ps1 -FullInit

      - name: Upload Packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: .\BuildOutput\Nuget

  create_release:
    needs: [build_target, build_independent_packages]
    runs-on: windows-latest
    steps:
      - name: Download assets for publication
        uses: actions/download-artifact@v4
        with:
          path: BuildOutput/NuGet/
          merge-multiple: true

      - name: Show asset names
        run: dir BuildOutput/Nuget

      - name: Publish packages to NuGet.org
        run: |
          if( [string]::IsNullOrWhitesapce('${{ secrets.NUGETPUSH_ACCESS_TOKEN }}'))
          {
              throw "'NUGETPUSH_ACCESS_TOKEN' does not exist"
          }
          $response = Invoke-WebRequest -Uri "https://www.nuget.org/api/v2/package/" -Headers @{ Authorization = "Bearer ${{ secrets.NUGETPUSH_ACCESS_TOKEN }}" }
          if ($response.StatusCode -ne 200)
          {
              throw "Invalid or expired API key"
          }
          dotnet nuget push .\BuildOutput\NuGet\*.nupkg -k ${{ secrets.NUGETPUSH_ACCESS_TOKEN }} -s 'https://api.nuget.org/v3/index.json' --skip-duplicate

      - name: Create Release
        if: (!cancelled())
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: BuildOutput/NuGet/*.nupkg

