<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <!-- TODO: This needs to account for the current RID; At present, hard coded to Win-x64 -->
    <RidNativeBinPath>$(BaseBuildOutputBinPath)LibLLVM\Release\x64</RidNativeBinPath>
    <BuildRid>win-x64</BuildRid>
    <PackagedBinPath>runtimes/$(BuildRid)/native</PackagedBinPath>

    <!-- Disable default items to force explicit item inclusion -->
    <EnableDefaultItems>false</EnableDefaultItems>

    <!-- Disable NUGET build warnings not relevant to a native binary + source code project-->
    <NoWarn>$(NoWarn);NU5128</NoWarn>
    <NoPackageAnalysis>true</NoPackageAnalysis>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <MinClientVersion>4.9.0</MinClientVersion>
    <Authors>.NET Foundation,LLVM.org,Ubiquity.NET</Authors>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>.NET Low Level Interop Bindings for Ubiquity.LibLLVM [$(LlvmVersion)]. Direct use of this low level interop API is **STRONGLY** discouraged (You are on your own!), instead you should use the Ubiquity.NET.Llvm package, which provides a full C# object model projection of the LLVM APIs on top of this library.</Description>
    <PackageTags>LLVM,Compiler,JIT,Ubiquity.NET</PackageTags>
    <PackageProjectUrl>https://github.com/UbiquityDotNET/Llvm.NET</PackageProjectUrl>
    <RepositoryUrl>https://github.com/UbiquityDotNET/Llvm.NET.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageLicenseExpression>Apache-2.0 WITH LLVM-exception</PackageLicenseExpression>
    <IncludeSymbols>false</IncludeSymbols>
    <EmbedUntrackedSources>false</EmbedUntrackedSources>
  </PropertyGroup>

  <!--
  This projects serves as a convenient placeholder to refernce the powershell module files.
  It uses project releative include and exclude patterns to simplify referencing ALL relevant files.
  -->

  <ItemGroup>
    <LLvmTarget Include="AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;LoongArch;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;VE;WebAssembly;X86;XCore"/>
  </ItemGroup>
    <!--
    One of the biggest problems with the native DLL is the MASSIVE size of the static libraries needed to build the
    final dynamic library. Currently, it is not known how to make this plausible on ANY OSS build infrastructure due
    to either time or storage space limitations.

    To simplify the problem of building on a public OSS system like GitHub Actions this assumes the DLLs are built to
    ONLY the native target AND one additional target. That could then enable the selection of the correct binary based on the
    desired target, but would not allow for multiple target support beyond those two at any given time. (It would also mean
    that the native library handle is completely released when the ILibLLvm is Disposed. [That is the implementation of that
    library OWNS the native handle. In such a case the interface would need to include new properties to determine what target
    was supported, beyond the default "native" and to limit initializing to only those two. (Or perhaps just always init them)]
    -->

  <ItemGroup>
    <Content Include="Ubiquity.NET.Llvm.Interop/GeneratedCode/*.cs">
        <Link>contentFiles/cs/net9.0/%(Filename).cs</Link>
        <PackagePath>contentFiles/cs/net9.0/GeneratedCode</PackagePath>
    </Content>

    <!--
    Can't use item transforms etc.. here due to how the VS IDE handles the Include. It can deal
    with a glob, but NOT an item transform. While other options exist in a target, the IDE deals
    with items from the evaluation phase only.
    -->
    <Content Include="$(RidNativeBinPath)\Ubiquity.NET.LibLLVM-*.dll">
        <Link>$(PackagedBinPath)/%(Filename).%(Extension)</Link>
        <PackagePath>$(PackagedBinPath)</PackagePath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Windows uses an external Symbols file [PDB] -->
  <ItemGroup Condition="$([MSBuild]::IsOsPlatform(Windows))">
    <Content Include="$(RidNativeBinPath)/Ubiquity.NET.LibLLVM-*.pdb">
        <Link>$(PackagedBinPath)/%(Filename).%(Extension)</Link>
        <PackagePath>$(PackagedBinPath)</PackagePath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Use -->
  <Target Name="VerifyBinaryDependencies" BeforeTargets="Build">
    <Error Condition="!Exists('$(RidNativeBinPath)\Ubiquity.NET.LibLLVM-%(LLvmTarget.Identity).dll')" Text="Missing Binary - $(RidNativeBinPath)\Ubiquity.NET.LibLLVM-%(LLvmTarget.Identity).dll)"/>
    <Error Condition="!Exists('$(RidNativeBinPath)\Ubiquity.NET.LibLLVM-%(LLvmTarget.Identity).pdb')" Text="Missing Symbols - $(RidNativeBinPath)\Ubiquity.NET.LibLLVM-%(LLvmTarget.Identity).pdb)"/>
  </Target>
</Project>
